from collections import namedtuple
from flask import Flask, render_template, session, redirect, url_for, flash
from flask_bootstrap import Bootstrap
from flask_wtf import FlaskForm
from wtforms import StringField, SubmitField
from wtforms.validators import DataRequired
import pymysql

app = Flask(__name__)
app.config['SECRET_KEY'] = 'hard to guess string'
bootstrap = Bootstrap(app)

# Persistent DB connection for simplicity (shared across requests)
dbname = 'sakila'
db = pymysql.connect(host='{{database_ip}}',
                     user='{{db_user}}', passwd='{{db_password}}', db=dbname)

class LoginForm(FlaskForm):
    email = StringField('Email address', validators=[DataRequired()])
    submit = SubmitField('Log in')

@app.route('/', methods=['GET', 'POST'])
def index():
    form = LoginForm()
    if form.validate_on_submit():
        cursor = db.cursor()
        print("form.email.data=" + form.email.data)
        cursor.execute("SELECT customer_id, first_name, last_name FROM customer WHERE email = %s", (form.email.data,))
        rows = cursor.fetchall()
        if rows:
            print("successful login")
            session['customer_id'] = rows[0][0]
            session['customer_name'] = "{} {}".format(rows[0][1], rows[0][2])
            return redirect(url_for('home'))
    return render_template('index.html', form=form)

@app.route('/home')
def home():
    cursor = db.cursor()
    cursor.execute(
        """
        SELECT rental_id, DATE(rental_date),  
               DATE(rental_date + INTERVAL film.rental_duration DAY) AS due_date,
               film.title
        FROM rental
        JOIN inventory USING(inventory_id)
        JOIN film USING(film_id)
        WHERE customer_id = %s AND return_date IS NULL
        """, (session['customer_id'],))
    Rental = namedtuple('Rental', ['rental_id', 'rental_date', 'due_date', 'film_title'])
    rentals = [Rental._make(row) for row in cursor.fetchall()]
    cursor.close()
    return render_template('home.html', rentals=rentals, customer=session['customer_name'])

@app.route('/browse_db')
def browse_db():
    cursor = db.cursor()
    cursor.execute("SHOW TABLES")
    tables = [field[0] for field in cursor.fetchall()[1:]]  # You might want to test this slice
    cursor.close()
    return render_template('browse_db.html', dbname=dbname, tables=tables)

@app.route('/table/<table>')
def table(table):
    cursor = db.cursor()
    cursor.execute(f"SELECT * FROM `{table}`")  # Safe against reserved keywords
    rows = cursor.fetchall()
    column_names = [desc[0] for desc in cursor.description]
    cursor.close()
    return render_template('table.html', table=table, columns=column_names, rows=rows)

# Only run the dev server if executed directly
if __name__ == '__main__':
    app.run(debug=True)

# Required for mod_wsgi (Apache)
application = app

